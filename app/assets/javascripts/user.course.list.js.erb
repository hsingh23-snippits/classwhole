var class_counter = 0;
var num_classes = 0;
var has_classes = false;
var selected_classes = {};
var course_destroy_url  = '/scheduler/courses/destroy/';
var hours_min = 0;
var hours_max = 0;

function ClassList(){ }

ClassList.prototype.init = function() {
    hours_min = parseInt($(".hour-count").attr("data-hours-min"));
    hours_max = parseInt($(".hour-count").attr("data-hours-max"));
    $(".user-course-list ul li ").each( function() { 
        has_classes = true;
        var class_id = $(this).find(".id").text(); 
        var class_hours_min = $(this).attr("data-hours-min");
        var class_hours_max = $(this).attr("data-hours-max");

        selected_classes[class_id] = $(this);
        num_classes++;

        var class_li = $(this);
        $(this).find(".remove-link").click( function() {
          mpq.track("Class removed");
					$.ajax({
            type: 'GET',
            url: course_destroy_url + class_id,
            success: function() {}
					});
          hours_max -= class_hours_max;
          hours_min -= class_hours_min;
          update_hours();
          delete selected_classes[ class_id ];
          class_li.slideUp(function(){ $(this).remove() });
        });
    });
}

ClassList.prototype.add_class_callback = function(event, ui) {
    var keycode = $.ui.keyCode;
    if( event.keyCode == keycode.TAB ) {
        /* If the user hit a tab, we don't want to add it just yet */
        return;
    }
    /* Prevent input box being filled */ 
    event.preventDefault();
    this.value = ""; 

    if ( ui.item ) {
        mpq.track("Class added");
        var class_id = ui.item.id;
        if( class_id in selected_classes ){
            /* return if the user as already selected the class*/
            pop_alert("error", ui.item.value, " is already selected");
            selected_classes[class_id].animate({
                backgroundColor: '#F08080',
            }, 100, function() {
                $(this).animate({backgroundColor: 'white'}, 500, undefined);
            });
            return;
        }

        /* Append the course to the currently populated list */
        var remove_course = $("<a/>").text("X").addClass("remove-link");
        hours_max += parseInt(ui.item.hours_max);
        hours_min += parseInt(ui.item.hours_min);
        show_button();
        update_hours();
        num_classes++;
        var hour_string;
        if( ui.item.hours_max - ui.item.hours_min != 0 )
          hour_string = ui.item.hours_min + "-" + ui.item.hours_max + " hr";
        else
          hour_string = ui.item.hours_min + " hr";
        var course_li = $("<li/>")
                            .append(remove_course)
                            .append($("<span/>")
                                .text(ui.item.label)
                                .addClass("code"))
                            .append($("<span/>")
                                .text(ui.item.title)
                                .addClass("title"))
                            .append($("<span/>")
                                .text(hour_string)
                                .addClass("hours"))
                            .append($("<span/>")
                                    .addClass("hidden id")
                                    .text(ui.item.id))
                            .css("display", "none");
        course_li.appendTo(".user-course-list ul");
        course_li.slideDown();

        remove_course.click( function() {
          mpq.track("Class removed");
          var removed = 0;
          $.ajax({
            type: 'GET',
            url:  '/scheduler/courses/destroy/'+ui.item.id,
          });
          course_li.slideUp();
          $(this).remove();
          num_classes--;
          hours_max -= parseInt( ui.item.hours_max );
          hours_min -= parseInt( ui.item.hours_min );
          update_hours();
          delete selected_classes[class_id];
        });

        selected_classes[class_id] = course_li;

					/* Call add courses */
			var string_class_id = class_id.toString();		    
			$.ajax({
		      type: 'POST',
		      data: { id: class_id },
          dataType: 'json',
		      url:  '/scheduler/courses/new',
          success: function( data, textStatus, xh ) {
            if( data.status == "success" ) {
              var course = get_course_li( class_id );
            } else {
              pop_alert( data.status, data.message );
            }
          }
		    });
    }
}

function get_course_li( course_id ) {
  var course_list = $(".user-course-list ul li");
  var current_course;
  for( var i =0; i < course_list.length; i++ ) {
    current_course = $(course_list[i]);
    if( current_course.find(".id").text() == course_id.toString() ) {
      return current_course;
    }
  }
}

ClassList.prototype.has_classes = function() {
  if( num_classes <= 0 )
    has_classes = false;
  return has_classes;
}

function update_hours() {
  if( hours_min - hours_max != 0 )
    var hour_string = "Total " + hours_min + "-" + hours_max + " hrs";
  else
    var hour_string = "Total " + hours_max + " hrs";
  $(".hour-count").text( hour_string );
}

function show_button() {
    if( has_classes ) return;

    $(".user-course-list span.hint").slideUp();
    $(".user-course-list h1").hide(true);
    update_hours();
    setTimeout( function() {$(".hour-count").slideDown();}, 500);
    var course_list = $(".user-course-list");
    var header = $("<h1/>").text("<%= $CURRENT_SEMESTER.name %>").addClass("hidden");
    course_list.prepend(header);
    header.slideDown();

    has_classes = true;
};

/* In order to send a list of class ids to rails, we need to silently 
   keep track of the class ids in a hidden form as well as send the size of the list */
var add_course_id_to_hidden_form = function( course_id ) { 
    $("<input>").val(course_id)
        .attr("type", "hidden")
        .attr("name", class_counter)
        .appendTo(".hidden-course-form");
};
